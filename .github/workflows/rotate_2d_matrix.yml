name: Rotate 2D Matrix CI

on:
  push:
    paths:
      - 'rotate_2d_matrix/**'
  pull_request:
    paths:
      - 'rotate_2d_matrix/**'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.12']

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dev deps (pep8 1.7.x + pycodestyle)
        run: |
          python -m pip install --upgrade pip
          pip install 'pep8==1.7.1' pycodestyle

      - name: Ensure required files exist and not empty
        working-directory: rotate_2d_matrix
        run: |
          test -s 0-rotate_2d_matrix.py
          test -s main_0.py
          test -s README.md

      - name: Check executability (Holberton: all files must be executable)
        working-directory: rotate_2d_matrix
        run: |
          test -x 0-rotate_2d_matrix.py
          test -x main_0.py

      - name: Shebang, docstring, and no-import checks
        working-directory: rotate_2d_matrix
        run: |
          # Shebang exact
          head -n 1 0-rotate_2d_matrix.py | grep -qx '#!/usr/bin/python3'
          # Module docstring present
          grep -q '"""' 0-rotate_2d_matrix.py
          # No imports allowed (use if-guard instead of leading !)
          if grep -Eq '^\s*(import|from)\s+' 0-rotate_2d_matrix.py; then
            echo "Imports detected in 0-rotate_2d_matrix.py" >&2
            exit 1
          fi

      - name: PEP8 (Holberton uses pep8 1.7.x)
        working-directory: rotate_2d_matrix
        run: |
          pep8 0-rotate_2d_matrix.py
          # Optional: pycodestyle as well
          pycodestyle 0-rotate_2d_matrix.py

      - name: Built-in sanity tests (like checker matrices)
        working-directory: rotate_2d_matrix
        run: |
          python - <<'PY'
          import copy
          rotate_2d_matrix = __import__('0-rotate_2d_matrix').rotate_2d_matrix

          def rotated_copy_cw(m):
              n = len(m)
              return [[m[n - 1 - j][i] for j in range(n)] for i in range(n)]

          cases = [
              [[1, 2, 3],
               [4, 5, 6],
               [7, 8, 9]],
              [[1, 11, 13, 19],
               [41, 32, 6, 22],
               [55, 21, 41, 66],
               [77, 29, 78, 2]],
              [[1, 2, 3, 4, 5],
               [6, 7, 8, 9, 10],
               [11, 12, 13, 14, 15],
               [16, 17, 18, 19, 20],
               [21, 22, 23, 24, 25]],
              [[5, 6],
               [7, 8]],
              [[5, 8, 11, 14, 17, 20],
               [23, 26, 29, 32, 35, 38],
               [41, 44, 47, 50, 53, 56],
               [59, 62, 65, 68, 71, 74],
               [77, 80, 83, 86, 89, 92],
               [95, 98, 101, 104, 107, 110]],
          ]

          for idx, original in enumerate(cases, 1):
              m = copy.deepcopy(original)
              expected = rotated_copy_cw(original)

              matrix_id = id(m)
              rows_id = [id(r) for r in m]

              ret = rotate_2d_matrix(m)

              assert ret is None, "Must not return a value"
              assert id(m) == matrix_id, "Top-level list must stay the same"
              assert [id(r) for r in m] == rows_id, "Row objects must be the same (in-place)"
              assert m == expected, "Incorrect rotation for case #%d" % idx

          print("Sanity tests passed.")
          PY

      - name: Run project main (prints rotated matrix)
        working-directory: rotate_2d_matrix
        run: ./main_0.py

      - name: Run unittest if present, else skip
        working-directory: rotate_2d_matrix
        run: |
          if ls test_*.py >/dev/null 2>&1; then
            python -m unittest -v
          else
            echo "No unittest files found, skipping."
          fi
