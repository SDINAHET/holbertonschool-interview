name: Find the Loop CI

on:
  workflow_dispatch:   # permet de lancer manuellement depuis l’onglet Actions
  push:
    branches: ["**"]
    paths:
      - 'find_the_loop/**'
      - '.github/workflows/find_the_loop.yml'   # <-- pour déclencher quand tu modifies le YAML
#   push:
#     paths:
#       - 'find_the_loop/**'
  pull_request:
    paths:
      - 'find_the_loop/**'

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc valgrind ltrace make

      - name: Ensure required files exist
        working-directory: find_the_loop
        run: |
          test -s 0-find_loop.c
          test -s lists.h
          test -s lib.c
          test -s 0-main.c
          test -s test_find_loop.c
          test -s test_checker_like.c     # 3rd test “checker-like”
          test -s no_alloc_main.c         # for ltrace anti-malloc/free
          test -s README.md

      - name: Quick header guard & prototype check
        working-directory: find_the_loop
        run: |
          grep -q "#ifndef _LISTS_H_" lists.h
          grep -q "#define _LISTS_H_" lists.h
          grep -q "typedef struct listint_s" lists.h
          grep -q "listint_t \\*find_listint_loop(listint_t \\*head);" lists.h

      - name: Heuristic check - max two vars & no arrays in function
        working-directory: find_the_loop
        shell: bash
        run: |
          # Extract the function body of find_listint_loop with brace counting
          awk '
            /listint_t[[:space:]]*\*find_listint_loop[[:space:]]*\(listint_t[[:space:]]*\*head\)/ {
              print; infunc=1; depth=0; next
            }
            infunc {
              op=gsub(/\{/, "{"); cl=gsub(/\}/, "}")
              depth+=op; depth-=cl
              print
              if (depth==0 && cl>0) exit
            }
          ' 0-find_loop.c > _func.c

          # No arrays inside the function
          if grep -q '\[' _func.c; then
            echo "Array declaration detected in function body"; exit 1
          fi

          # Count declared listint_t* variables (ignore the signature)
          cnt=$(
            awk '
              /listint_t[[:space:]]*\*/ && $0 !~ /find_listint_loop/ {
                line=$0
                sub(/^[[:space:]]*/, "", line)
                gsub(/[[:space:]]+/, " ", line)
                sub(/^.*\*/, "*", line)
                split(line, sem, ";")
                n=split(sem[1], parts, ",")
                print n
              }
            ' _func.c | awk '{s+=$1} END{print s+0}'
          )

          if [ "${cnt:-0}" -gt 2 ]; then
            echo "More than two variables declared in find_listint_loop (found $cnt)"; exit 1
          fi

          echo "Heuristic var check OK (<=2) & no arrays."
          rm -f _func.c

      - name: Compile main (using lib.c)
        working-directory: find_the_loop
        run: |
          gcc -Wall -Werror -Wextra -pedantic 0-find_loop.c lib.c 0-main.c -o main

      - name: Run main (sample output)
        working-directory: find_the_loop
        run: ./main

      - name: Compile unit tests (core)
        working-directory: find_the_loop
        run: |
          gcc -Wall -Werror -Wextra -pedantic 0-find_loop.c lib.c test_find_loop.c -o tests

      - name: Run unit tests (core)
        working-directory: find_the_loop
        run: ./tests

      - name: Compile unit tests (checker-like)
        working-directory: find_the_loop
        run: |
          gcc -Wall -Werror -Wextra -pedantic 0-find_loop.c lib.c test_checker_like.c -o tests_checker

      - name: Run unit tests (checker-like)
        working-directory: find_the_loop
        run: ./tests_checker

      - name: Memory leak check with Valgrind (checker-like)
        working-directory: find_the_loop
        run: |
          valgrind --leak-check=full --error-exitcode=1 ./tests_checker

      - name: ltrace check (no malloc/free in YOUR function)
        working-directory: find_the_loop
        run: |
          gcc -Wall -Werror -Wextra -pedantic 0-find_loop.c no_alloc_main.c -o no_alloc
          set +e
          # capture uniquement malloc/free
          ltrace -e malloc,free ./no_alloc 2> _ltrace.log
          rc=$?
          set -e

          # si le log contient malloc/free venant de find_listint_loop → erreur
          if grep -q "find_listint_loop" _ltrace.log; then
            echo "malloc/free detected inside find_listint_loop"; cat _ltrace.log; exit 1
          fi

          echo "OK: no malloc/free detected in find_listint_loop"

      - name: Install Betty (style & doc)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git perl
          git clone --depth=1 https://github.com/holbertonschool/Betty.git /tmp/Betty
          sudo bash /tmp/Betty/install.sh
          betty --version || true

      - name: Betty style & doc check
        working-directory: find_the_loop
        run: |
        #   # Vérifie tous les .c et .h du dossier
        #   betty *.c *.h
        # vérifie 0-find_loop.c
        betty 0-find_loop.c

      - name: Optional - Betty style (runs only if betty is available)
        working-directory: find_the_loop
        shell: bash
        run: |
          if command -v betty >/dev/null 2>&1; then
            betty 0-find_loop.c || exit 1
          else
            echo "Betty not installed, skipping."
          fi
